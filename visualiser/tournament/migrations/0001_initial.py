# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2016-11-17 23:04
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import tournament.models
import tournament.players


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CentreCount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveSmallIntegerField(validators=[tournament.models.validate_year_including_start])),
                ('count', models.PositiveSmallIntegerField(validators=[tournament.models.validate_sc_count])),
            ],
            options={
                'ordering': ['game', 'year'],
            },
        ),
        migrations.CreateModel(
            name='DrawProposal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveSmallIntegerField(validators=[tournament.models.validate_year])),
                ('season', models.CharField(choices=[(b'S', 'spring'), (b'F', 'fall')], max_length=1)),
                ('passed', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Must be unique within the tournament. No spaces', max_length=20, validators=[tournament.models.validate_game_name])),
                ('started_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_finished', models.BooleanField(default=False)),
                ('is_top_board', models.BooleanField(default=False)),
                ('power_assignment', models.CharField(choices=[(b'R', 'Random'), (b'F', 'French method')], default=b'R', max_length=1, verbose_name='Power assignment method')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='GameImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveSmallIntegerField(validators=[tournament.models.validate_year])),
                ('season', models.CharField(choices=[(b'S', 'spring'), (b'F', 'fall')], default=b'S', max_length=1)),
                ('phase', models.CharField(choices=[(b'M', 'movement'), (b'R', 'retreats'), (b'X', 'adjustments')], default=b'M', max_length=1)),
                ('image', models.ImageField(upload_to=tournament.models.game_image_location)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.Game')),
            ],
            options={
                'ordering': ['game', 'year', '-season', 'phase'],
            },
        ),
        migrations.CreateModel(
            name='GamePlayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_year', models.PositiveSmallIntegerField(default=1901, validators=[tournament.models.validate_year])),
                ('first_season', models.CharField(choices=[(b'S', 'spring'), (b'F', 'fall')], default=b'S', max_length=1)),
                ('last_year', models.PositiveSmallIntegerField(blank=True, null=True, validators=[tournament.models.validate_year])),
                ('last_season', models.CharField(blank=True, choices=[(b'S', 'spring'), (b'F', 'fall')], max_length=1)),
                ('score', models.FloatField(default=0.0)),
                ('power_choice_order', models.PositiveSmallIntegerField(default=1)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.Game')),
            ],
        ),
        migrations.CreateModel(
            name='GameSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
                ('initial_image', models.ImageField(upload_to=tournament.models.game_image_location)),
            ],
        ),
        migrations.CreateModel(
            name='GreatPower',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
                ('abbreviation', models.CharField(max_length=1, unique=True)),
                ('starting_centres', models.PositiveIntegerField()),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('wdd_player_id', models.PositiveIntegerField(blank=True, null=True, unique=True, validators=[tournament.players.validate_wdd_player_id], verbose_name='WDD player id')),
                ('picture', models.ImageField(blank=True, null=True, upload_to=tournament.players.player_picture_location)),
            ],
            options={
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='PlayerGameResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tournament_name', models.CharField(max_length=20)),
                ('game_name', models.CharField(max_length=20)),
                ('date', models.DateField()),
                ('position', models.PositiveSmallIntegerField()),
                ('position_equals', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('score', models.FloatField(blank=True, null=True)),
                ('final_sc_count', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('result', models.CharField(blank=True, choices=[(b'W', 'Win'), (b'D2', '2-way draw'), (b'D3', '3-way draw'), (b'D4', '4-way draw'), (b'D5', '5-way draw'), (b'D6', '6-way draw'), (b'D7', '7-way draw'), (b'L', 'Loss')], max_length=2)),
                ('year_eliminated', models.PositiveSmallIntegerField(blank=True, null=True, validators=[tournament.models.validate_year])),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.Player')),
                ('power', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='tournament.GreatPower')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerRanking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tournament', models.CharField(max_length=30)),
                ('position', models.PositiveSmallIntegerField()),
                ('year', models.PositiveSmallIntegerField()),
                ('date', models.DateField(blank=True, null=True)),
                ('title', models.CharField(blank=True, max_length=30)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.Player')),
            ],
        ),
        migrations.CreateModel(
            name='Round',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scoring_system', models.CharField(choices=[('CDiplo 100', 'CDiplo 100'), ('CDiplo 80', 'CDiplo 80'), ('Draw size', 'Draw size'), ('Solo or bust', 'Solo or bust'), ('Sum of Squares', 'Sum of Squares')], help_text='How to calculate a score for one game', max_length=40, verbose_name='Game scoring system')),
                ('dias', models.BooleanField(verbose_name='Draws Include All Survivors')),
                ('start', models.DateTimeField()),
                ('final_year', models.PositiveSmallIntegerField(blank=True, null=True, validators=[tournament.models.validate_year])),
                ('earliest_end_time', models.DateTimeField(blank=True, null=True)),
                ('latest_end_time', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['start'],
            },
        ),
        migrations.CreateModel(
            name='RoundPlayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField(default=0.0)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.Player')),
                ('the_round', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.Round', verbose_name='round')),
            ],
            options={
                'ordering': ['player'],
            },
        ),
        migrations.CreateModel(
            name='SetPower',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('colour', models.CharField(max_length=20)),
                ('power', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.GreatPower')),
                ('the_set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.GameSet', verbose_name='set')),
            ],
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('tournament_scoring_system', models.CharField(choices=[('Sum best 2 rounds', 'Sum best 2 rounds'), ('Sum best 3 rounds', 'Sum best 3 rounds'), ('Sum best 4 rounds', 'Sum best 4 rounds')], help_text='How to combine round scores into a tournament score', max_length=40)),
                ('round_scoring_system', models.CharField(choices=[('Best game counts', 'Best game counts')], help_text='How to combine game scores into a round score', max_length=40)),
                ('is_published', models.BooleanField(default=False, help_text='Whether the tournament is visible to all site visitors')),
                ('managers', models.ManyToManyField(help_text='Which users can modify the tournament,<br/> and see it while it is unpublished.<br/>', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='TournamentPlayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField(default=0.0)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.Player')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.Tournament')),
            ],
            options={
                'ordering': ['player'],
            },
        ),
        migrations.AddField(
            model_name='round',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.Tournament'),
        ),
        migrations.AddField(
            model_name='gameplayer',
            name='player',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.Player'),
        ),
        migrations.AddField(
            model_name='gameplayer',
            name='power',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='tournament.GreatPower'),
        ),
        migrations.AddField(
            model_name='game',
            name='the_round',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.Round', verbose_name='round'),
        ),
        migrations.AddField(
            model_name='game',
            name='the_set',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.GameSet', verbose_name='set'),
        ),
        migrations.AddField(
            model_name='drawproposal',
            name='game',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.Game'),
        ),
        migrations.AddField(
            model_name='drawproposal',
            name='power_1',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='tournament.GreatPower'),
        ),
        migrations.AddField(
            model_name='drawproposal',
            name='power_2',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='tournament.GreatPower'),
        ),
        migrations.AddField(
            model_name='drawproposal',
            name='power_3',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='tournament.GreatPower'),
        ),
        migrations.AddField(
            model_name='drawproposal',
            name='power_4',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='tournament.GreatPower'),
        ),
        migrations.AddField(
            model_name='drawproposal',
            name='power_5',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='tournament.GreatPower'),
        ),
        migrations.AddField(
            model_name='drawproposal',
            name='power_6',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='tournament.GreatPower'),
        ),
        migrations.AddField(
            model_name='drawproposal',
            name='power_7',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='tournament.GreatPower'),
        ),
        migrations.AddField(
            model_name='drawproposal',
            name='proposer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='tournament.GreatPower'),
        ),
        migrations.AddField(
            model_name='centrecount',
            name='game',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.Game'),
        ),
        migrations.AddField(
            model_name='centrecount',
            name='power',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='tournament.GreatPower'),
        ),
        migrations.AlterUniqueTogether(
            name='setpower',
            unique_together=set([('the_set', 'power')]),
        ),
        migrations.AlterUniqueTogether(
            name='playergameresult',
            unique_together=set([('tournament_name', 'game_name', 'player', 'power')]),
        ),
        migrations.AlterUniqueTogether(
            name='gameimage',
            unique_together=set([('game', 'year', 'season', 'phase')]),
        ),
        migrations.AlterUniqueTogether(
            name='centrecount',
            unique_together=set([('power', 'game', 'year')]),
        ),
    ]
